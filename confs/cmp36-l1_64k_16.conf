# By Ching-Kai Liang
# Using bus as NoC

procsPerNode  = 36
cacheLineSize = 64
l1CacheSize   = 64*1024
l1CacheAssoc  = 16
nThreads      = 1
NOCdim = 6 # Assume a $(NOCdim) x $(NOCdim) NOC architecture

issue         = 2
cpucore[0:$(procsPerNode)-1] = 'issueX' 

###########################################
# SYSTEM                                  #
#   --NoMigration: libcore/OSSim          #
#   --issueWrongPath: libcore/FetchEngine #
#   --technology: libcore/OSSim           #
###########################################
pageSize       = 4096
issueWrongPath = true
technology     = 'techParam'

################################
# clock-panalyzer input        #
#   --frequency: libcore/OSSim #
################################
[techParam]
frequency  = 1e9      # Hz


##############################
# PROCESSORS' CONFIGURATION  #
##############################
[issueX]
frequency       = 1e9
areaFactor      = ($(issue)*$(issue)+0.1)/16  # Area compared to Alpha264 EV6
inorder         = false
smtContexts     = $(nThreads)
fetchWidth      = $(issue)
issueWidth      = $(issue)
retireWidth     = $(issue)
instQueueSize   = 2*$(issue)
decodeDelay     = 2
renameDelay     = 1
wakeupDelay     = 2                 
maxBranches     = 16*$(issue)
bb4Cycle        = 1 # Number of basic blocks that can be fetched within a cycle. Basically how many branches can be fetched in one cycle
maxIRequests    = 4 # Max number of outstanding instruction requests
interClusterLat = 2
intraClusterLat = 1
cluster[0]      = 'FXClusterIssueX'
cluster[1]      = 'FPClusterIssueX'
stForwardDelay  = 1 
maxLoads        = 14*$(issue)+16
maxStores       = 10*$(issue)+16
regFileDelay    = 1
robSize         = 36*$(issue)+32
intRegs         = 32+36*$(issue)
fpRegs          = 32+36*$(issue)
bpred           = 'BPredIssueX'
enableICache    = true
dtlb            = 'FXDTLB'
itlb            = 'FXITLB'
dataSource      = "DMemory DL1"
instrSource     = "IMemory IL1"
OSType          = 'dummy' # Memory OS, either Dummy or std


# integer functional units
[FXClusterIssueX]
winSize    = 12*$(issue)+32 # number of entries in window
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 2
schedDelay    = 1 # Minimum latency like a intraClusterLat
iStoreLat  = 1
iStoreUnit = 'LDSTIssueX'
iLoadLat   = 1
iLoadUnit  = 'LDSTIssueX'
iALULat    = 1
iALUUnit   = 'ALUIssueX'
iBJLat     = 1
iBJUnit    = 'ALUIssueX'
iDivLat    = 12
iDivUnit   = 'ALUIssueX'
iMultLat   = 4
iMultUnit  = 'ALUIssueX'

[LDSTIssueX]
Num = $(issue)/3+1
Occ = 1

[ALUIssueX]
Num = $(issue)/3+1
Occ = 1

# floating point functional units
[FPClusterIssueX]
winSize    = 8*$(issue)
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 2
schedDelay    = 1 # Minimum latency like a intraClusterLat
fpALULat   = 1
fpALUUnit  = 'FPIssueX'
fpMultLat  = 8
fpMultUnit = 'FPIssueX'
fpDivLat   = 20
fpDivUnit  = 'FPIssueX'

[FPIssueX]
Num = $(issue)/2+1
Occ = 1

# branch prediction mechanism
[BPredIssueX]
type          = "hybrid"
BTACDelay     = 0 #Branch Taken ACcess Delay, 0 means unblock when execute, non-zero is a constant delay in branch
l1size        = 1
l2size        = 2*1024		
l2Bits        = 1
historySize   = 8	
Metasize      = 2*1024	
MetaBits      = 2
localSize     = 2*1024
localBits     = 2
btbSize       = 256	
btbBsize      = 1
btbAssoc      = 2
btbReplPolicy = 'LRU'
btbHistory    = 0
rasSize       = 32

# memory translation mechanism
[FXDTLB]
size       = 64*8
assoc      = 4
bsize      = 8
numPorts   = 2
replPolicy = 'LRU'
deviceType = 'cache' # libcore/GMemorySystem, options: dummy, cache, icache, smpcache

[FXITLB]
size       = 64*8
assoc      = 4
bsize      = 8
numPorts   = 2
replPolicy = 'LRU'
deviceType = 'cache'

##############################
# MEMORY SUBSYSTEM           #
##############################
# instruction source (1/2 of L2)
[IMemory]
deviceType    = 'icache'
size          = 64*1024
assoc         = 8
bsize         = $(cacheLineSize)
writePolicy   = 'WT'
replPolicy    = 'LRU'
protocol	  = 'DMESI'
numPorts      = 1
portOccp      = 1
hitDelay      = 5 
missDelay     = 5                # this number is added to the hitDelay
homeDirType   = 'stride' # Support firstTouch, stride, random, profile, and dynamic (SMPCache.cpp)
homeDirBlockSize = 1 # size = 2^(homeDirBlockSize)
MSHR          = "iMSHR"
lowerLevel	  = "Router RTR sharedBy 1" # Format: [Type] [UserDefinedName] [ShareOption]
sideLowerLevel= "" # Another lower level

[iMSHR]
type          = 'single'
size          = 8
bsize         = $(cacheLineSize)

# data source (1/2 of L2)
[DMemory]
deviceType    = 'smpcache'
size          = 64*1024		
assoc         = 8
bsize         = $(cacheLineSize)
writePolicy   = 'WB'
replPolicy    = 'LRU'
protocol      = 'DMESI'
numPorts      = 2	
portOccp      = 1 # Number of occupancy per port. 0: UnlimitedPort, 1:FullyPipelinedPort, other value: PortPipe
hitDelay      = 18
missDelay     = 18            
homeDirType   = 'stride' # Support firstTouch, stride, random, profile, and dynamic (SMPCache.cpp)
homeDirBlockSize = 1 # size = 2^(homeDirBlockSize)
cohOutput     = "smpcache.out"
MSHR          = "DMSHR"
lowerLevel	  = "Router RTR sharedBy 1"
sideLowerLevel= "L3Slice L3S" # Another lower level

[DMSHR]
type          = 'single' # Options: none, nodeps, full, single, banked Check libsuc/MSHR
size          = 16
bsize         = $(cacheLineSize)


[Router]
deviceType    = 'router'
delay         = 1
numPorts      = 2  # read / write
portOccp      = 1
dimX          = $(NOCdim) # This needs to be the same with NOC dimension
dimY          = $(NOCdim) # This needs to be the same with NOC dimension
lowerLevel    = "NOC NOC shared"

[NOC]
deviceType    = 'booksim'
booksim_config= 'booksim.conf'
booksim_output= 'booksim.log'
booksim_sample= 1000000
lowerLevel    = "MemoryCtrl MemCtrl shared"

[L3Slice]
deviceType    = 'slicecache'
inclusive     = false
size          = 1*128*1024      # L3 size per-slice
assoc         = 16
bsize         = $(cacheLineSize)
writePolicy   = 'WB'
replPolicy    = 'LRU'
numPorts      = 2               # one for L1, one for snooping
portOccp      = 1		        # throughput of a cache
hitDelay      = 34
missDelay     = 34              # exclusive, i.e., not added to hitDelay
numPortsDir   = 1               # one for L1, one for snooping
portOccpDir   = 1		        # throughput of a cache
hitDelayDir   = 1
MSHR          = 'L3MSHR'
lowerLevel    = "Router RTR sharedBy 1"

[L3MSHR]
size          = 64
type          = 'single'
bsize         = $(cacheLineSize)

[MemoryCtrl]
deviceType	  = 'memoryController'
numPorts      = 4	# 4 channel
portOccp      = 1
delay		  = 1
lowerLevel    = "MemoryBus MemoryBus"

[MemoryBus]
deviceType    = 'bus'
numPorts      = 4	# 4 channel
portOccp      = $(cacheLineSize) / 4   # assuming 4 bytes/cycle bw 
delay         = 15
lowerLevel    = "Memory Memory"

[Memory]
deviceType    = 'niceCache'
size          = 64
assoc         = 1
bsize         = 64
writePolicy   = 'WB'
replPolicy    = 'LRU'
numPorts      = 1
portOccp      = 1
hitDelay      = 200 
missDelay     = 1000
MSHR          = NoMSHR
lowerLevel    = 'voidDevice'

[NoMSHR]
type          = 'none'
size          = 128
bsize         = 64

[voidDevice]
deviceType    = 'void'

############################
#     BEGIN SUPERTRANS     #
############################
<trans.conf>

############################
#     BEGIN MIPSEMUL       #
############################

[FileSys]
mount="/bin=/net/hp95/softarch/joh/sim/mipsroot/tools/bin:/lib=/net/hp95/softarch/joh/sim/mipsroot/tools/lib:/tools=/net/hp95/softarch/joh/sim/mipsroot/tools"

